@page "/orders/{orderId:int}/furniture"
@page "/orders/{orderId:int}/furniture/{id:int}"

@inject ILocalStorageService localStorage
@inject NavigationManager NavigationManager
@inject IFurnitureService FurnitureService
@attribute [Authorize]

@if (Id == null)
{
    <PageTitle>New Furniture</PageTitle>
    <h3>Create a new furniture</h3>
}
else
{
    <PageTitle>Edit Furniture</PageTitle>
    <h3>Edit Furniture Nr @Id</h3>
}

<EditForm Model="furniture" OnSubmit="HandleSubmit">
    <div>
        <label for="name">Name</label>
        <InputText id="name" @bind-Value="furniture.Name" class="form-control"></InputText>
    </div>
    <div>
        <label for="imageUrl">Image Url</label>
        <InputText id="imageUrl" @bind-Value="furniture.ImageUrl" class="form-control"></InputText>
    </div>
    @if (Id != null)
    {
        <div>
            <label for="toAssemble">To Assemble</label>
            <select id="toAssemble" class="form-select" @bind="ToAssemble">
                <option value="true">Yes</option>
                <option value="false">No</option>
            </select>
        </div>
    }
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    @if (Id != null)
    {
        <button type="button" class="btn btn-danger" @onclick="ShowModal">Delete</button>
    }
</EditForm>

<br />
<button class="btn btn-primary" @onclick="GoToParts">Check included parts</button>

@code {
    [Parameter]
    public int OrderId { get; set; }
    [Parameter]
    public int? Id { get; set; }
    [CascadingParameter] IModalService Modal { get; set; }

    string ToAssemble = "true";
    string btnText = string.Empty;

    SaitynoLab.Shared.Furniture furniture = new SaitynoLab.Shared.Furniture();

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Create new furniture" : "Edit furniture";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            furniture = await FurnitureService.GetSingleFurniture(OrderId, (int)Id);
        }
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await FurnitureService.CreateFurniture(OrderId, furniture);
        }
        else
        {
            furniture.ToAssemble = ToAssemble.CompareTo("true") == 0;
            await FurnitureService.UpdateFurniture(OrderId, furniture);
        }
    }

    async Task DeleteFurniture()
    {
        if (Id != null)
        {
            await FurnitureService.DeleteFurniture(OrderId, (int)Id);
        }
    }

    async Task ShowModal()
    {
        var confirmModal = Modal.Show<ConfirmationDialog>("Delete Selected Item?");

        var modalResult = await confirmModal.Result;

        if (modalResult.Cancelled == false)
        {
            await DeleteFurniture();
            Console.WriteLine("Deleted");
        }
        else
        {
            Console.WriteLine("Action cancelled");
        }
    }

    void GoToParts()
    {
        NavigationManager.NavigateTo($"/orders/{OrderId}/allfurniture/{Id}/parts");
    }
}