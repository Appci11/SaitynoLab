@page "/orders"

@inject ILocalStorageService localStorage
@inject IOrdersService OrdersService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Orders</PageTitle>

<h3>Orders</h3>

@if (Loaded)
{
    <AuthorizeView Roles="Admin">
        <Authorized>
            <OrdersTableForAdmin Orders="@OrdersService.Orders"></OrdersTableForAdmin>
        </Authorized>
        <NotAuthorized></NotAuthorized>
    </AuthorizeView>
    <AuthorizeView Roles="RegisteredUser">
        <Authorized>
            <OrdersTableForUser Orders="@OrdersService.Orders"></OrdersTableForUser>
        </Authorized>
        <NotAuthorized></NotAuthorized>
    </AuthorizeView>
}

else
{
    <div class="loader">Loading...</div>
}
<AuthorizeView Roles="RegisteredUser">
    <Authorized>
        <button class="btn btn-primary" @onclick="CreateNewOrder">Create a new order</button>
    </Authorized>
    <NotAuthorized />
</AuthorizeView>


@code {
    bool Loaded = false;

    int UserId = 0;

    protected override async Task OnInitializedAsync()
    {
        await OrdersService.GetOrders();
        var token = await localStorage.GetItemAsync<string>("token");
        var jwt = new JwtSecurityTokenHandler().ReadJwtToken(token);
        string userId = jwt.Claims.First(c => c.Type == "id").Value;
        UserId = int.Parse(userId);
        Loaded = true;
    }

    void ShowOrder(int id)
    {
        NavigationManager.NavigateTo($"order/{id}");
    }

    void CreateNewOrder()
    {
        NavigationManager.NavigateTo("/order");
    }
}