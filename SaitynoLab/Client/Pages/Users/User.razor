@page "/user"
@page "/user/{id:int}"
@inject IUsersService UsersService
@attribute [Authorize(Roles = "Admin")]

@if(Id == null)
{
    <PageTitle>New user</PageTitle>
    <h3>Create a new user</h3>
}
else
{
    <PageTitle>Edit @user.Username</PageTitle>
    <h3>Edit @user.Username</h3>
}

<EditForm Model="user" OnSubmit="HandleSubmit">
    <div>
        <label for="name">Name</label>
        <InputText id="name" @bind-Value="user.Username" class="form-control"></InputText>
    </div>
    @if(Id != null)
    {
        <div>
            <label for="role">Role</label>
            @*<InputText id="role" @bind-Value="user.Role" class="form-control"></InputText>*@
            <select id="role" class="form-select" @bind="user.Role">
                <option value="Admin">Admin</option>
                <option value="RegisteredUser">RegisteredUser</option>
            </select>
        </div>
    }
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    @if (Id != null)
    {
        <button type="button" class="btn btn-danger" @onclick="DeleteUser">Delete</button>
    }
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    SaitynoLab.Shared.User user = new SaitynoLab.Shared.User();

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Create new user" : "Edit user";
    }

    protected override async Task OnParametersSetAsync()
    {
        if(Id != null)
        {
            user = await UsersService.GetSingleUser((int)Id);
        }
    }

    async Task HandleSubmit()
    {
        if(Id == null)
        {
            await UsersService.CreateUser(user);
        }
        else
        {
            await UsersService.UpdateUser(user);
        }
    }

    async Task DeleteUser()
    {
        await UsersService.DeleteUser(user.Id);
    }
}
